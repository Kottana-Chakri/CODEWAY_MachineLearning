import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.preprocessing import LabelEncoder
from sklearn.svm import LinearSVC
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix


# Read train_data.txt
train_data = pd.read_table('/content/drive/MyDrive/Genre Classification Dataset/train_data.txt', sep=':::', names=['ID', 'TITLE', 'GENRE', 'DESCRIPTION'])

# Read test_data.txt
test_data = pd.read_table('/content/drive/MyDrive/Genre Classification Dataset/test_data.txt', sep=':::', names=['ID', 'TITLE', 'GENRE', 'DESCRIPTION'])

# Read test_solution_data.txt
test_solution_data = pd.read_table('/content/drive/MyDrive/Genre Classification Dataset/test_data_solution.txt', sep=':::', names=['ID', 'TITLE', 'GENRE', 'DESCRIPTION'])



# Plotting number of movies per genre
plt.figure(figsize=(15, 8))
sns.countplot(x=train_data['GENRE'], order=train_data['GENRE'].value_counts().index)
plt.xticks(rotation=50)
plt.grid(linestyle='-', color='black')
plt.title('Number of Movies per Genre')
plt.ylabel('Number of Movies')
plt.xlabel('Genre')
plt.show()

# Adding DESCRIPTION_length column to train_data
train_data['DESCRIPTION_length'] = train_data['DESCRIPTION'].apply(len)



# Plotting DESCRIPTION_length per genre
plt.figure(figsize=(15, 8))
sns.barplot(x='GENRE', y='DESCRIPTION_length', data=train_data)
plt.xticks(rotation=90)
plt.grid()
plt.title('Description Length per Genre')
plt.ylabel('Description Length')
plt.xlabel('Genre')
plt.show()

# Finding top genres
top_genre = train_data['GENRE'].value_counts().head(10)



# Plotting top genres
plt.figure(figsize=(20, 10))
top_genre.plot(kind='bar', color='blue')
plt.title('Top 10 most frequent genres')
plt.grid()
plt.ylabel('Number of Movies')
plt.xlabel('Genre')
plt.show()

# Preprocessing for classification
# Encode genre labels
label_encoder = LabelEncoder()
train_data['GENRE_encoded'] = label_encoder.fit_transform(train_data['GENRE'])

# Vectorize text data
vectorizer = TfidfVectorizer(max_features=10000)
X_train = vectorizer.fit_transform(train_data['DESCRIPTION'])
y_train = train_data['GENRE_encoded']

# Split data into train and validation sets
X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)

# Train LinearSVC model
model = LinearSVC()
model.fit(X_train, y_train)

# Evaluate model
y_pred = model.predict(X_val)
accuracy = accuracy_score(y_val, y_pred)
print("Validation Accuracy:", accuracy)

# Generate classification report and confusion matrix
print(classification_report(y_val, y_pred))
conf_matrix = confusion_matrix(y_val, y_pred)
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', cbar=False)
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.title('Confusion Matrix')
plt.show()
